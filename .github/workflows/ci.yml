name: CI

on:
  push:
    branches: [ main, feat/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |-
            ~/.cache/go-build
            ${{ github.workspace }}/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install dependencies
        run: go env -w GOPROXY=https://proxy.golang.org && go mod download
      - name: Run vet
        run: go vet ./...
      - name: Run tests
        run: go test -v ./...

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: |
            --timeout=5m
            --out-format=github-actions
        continue-on-error: false

      - name: Run tests
        run: go test ./...

      - name: Lint
        run: golangci-lint run ./...

  package-vsix:
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Enable pnpm via corepack
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Install extension dependencies
        run: cd extension && pnpm install --no-frozen-lockfile

      - name: Build extension
        run: cd extension && pnpm build

      - name: Package VSIX
        run: cd extension && npx @vscode/vsce package --no-dependencies

      - id: create-versionless
        name: Create versionless VSIX
        run: |
          cd extension
          VSIX_FILE=$(ls -1t *.vsix | head -n1)
          BASE_NAME=$(node -e "console.log(require('./package.json').name)")
          cp "$VSIX_FILE" "$BASE_NAME.vsix"
          echo "basename=$BASE_NAME.vsix" >> $GITHUB_OUTPUT

      - name: Upload versionless VSIX
        uses: actions/upload-artifact@v4
        with:
          name: cursor-rules-manager-vsix
          path: extension/${{ steps.create-versionless.outputs.basename }}
