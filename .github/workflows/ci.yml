name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: read

jobs:
  lint-test:
    name: Lint & Test (Go)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install tools
        run: |
          set -euo pipefail
          make install-tools

      - name: Generate Protobuf
        run: |
          set -euo pipefail
          make generate

      - name: Test (fmt + vet + race + cover)
        run: |
          set -euo pipefail
          make generate
          make test
          # Coverage threshold temporarily disabled â€” investigation in progress
          # go tool cover -func=coverage.out | awk '/total:/ {val=$3} END { if (val+0 < 60) { print "Coverage below 60%: " val; exit 1 } }'

      - name: Verify clean tree after generation
        run: |
          set -euo pipefail
          git status --porcelain
          if ! git diff --quiet; then
            echo "Generated files changed; run 'make generate' and commit results.";
            git diff --name-only
            exit 1
          fi

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  build-binaries:
    name: Build Binaries (Go)
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"

      - name: Install tools
        run: make install-tools

      - name: Build cmd targets
        run: |
          set -euo pipefail
          make generate
          make deps
          make build

  integration-tests:
    name: Integration Tests (Go)
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"

      - name: Install tools
        run: |
          set -euo pipefail
          make install-tools

      - name: Generate Protobuf
        run: |
          set -euo pipefail
          make generate

      - name: Run integration tests (docker required)
        env:
          TESTCONTAINERS_RYUK_DISABLED: "false"
        run: |
          set -euo pipefail
          go test -v -race -tags=integration ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-binaries
          path: build/*

  functional-integration:
    name: Functional Integration (script)
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"

      - name: Make build
        run: |
          set -euo pipefail
          make build

      - name: Run integration script
        run: |
          set -euo pipefail
          chmod +x ./scripts/integration_test.sh
          ./scripts/integration_test.sh

      - name: Upload integration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: |
            /tmp/*cursor-rules*.log

name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Install pnpm
        run: |
          curl -fsSL https://get.pnpm.io/install.sh | sh -
          export PATH="$$HOME/.local/share/pnpm:${PATH}"
      - name: Run go test
        run: go test ./...
      - name: Run go vet
        run: go vet ./...
      - name: Build CLI
        run: make build
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.59.0
          export PATH="$(go env GOPATH)/bin:${PATH}"
      - name: Run golangci-lint
        run: golangci-lint run
      - name: Build extension (optional)
        run: |
          cd extension || exit 0
          if [ -f package.json ]; then
            pnpm build || true
          fi

